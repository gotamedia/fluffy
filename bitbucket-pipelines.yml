image: atlassian/default-image:3

pipelines:
  branches:
    trunk:
      - step:
          name: Build and Test
          caches:
            - node
          script:
            - npm i
            - npm test
            - npm run build
          artifacts:
            - dist/**
      - step:
          name: Publish
          deployment: production
          script:
            - npm i -g standard-version
            - npm run release
            - git push --follow-tags origin trunk
            - pipe: atlassian/npm-publish:0.3.2
              variables:
                NPM_TOKEN: ${NPM_TOKEN}
                FOLDER: "dist"
  custom:
      Test:
        - step:
            name: Cypress Test
            image: cypress/browsers:node16.14.2-slim-chrome103-ff102
            caches:
              - node
            script:
              - npm i
              - npm run cy:run

      Storybook:
        - variables:
            - name: ENVIRONMENT
              default: dev
              allowed-values:
                - "dev"
                - "prod"
        - step:
            name: Build
            caches:
              - node
            script:
              - npm i
              - npm run build
              - npm run build-storybook
            artifacts:
              - storybook-static/**
        - step:
            name: Deploy
            deployment: production
            image:
              name: gotamedia/aws-cli:latest
              run-as-user: 1000
            script:
              - >
                if [[ ${ENVIRONMENT} == "prod" ]]; then
                  export AWS_ACCESS_KEY_ID=${prod_AWS_ACCESS_KEY_ID}
                  export AWS_SECRET_ACCESS_KEY=${prod_AWS_SECRET_ACCESS_KEY}
                  export CERTIFICATE_ARN=${prod_CERTIFICATE_ARN}
                  export DOMAIN_NAME=${prod_DOMAIN_NAME}
                else
                  export AWS_ACCESS_KEY_ID=${dev_AWS_ACCESS_KEY_ID}
                  export AWS_SECRET_ACCESS_KEY=${dev_AWS_SECRET_ACCESS_KEY}
                  export CERTIFICATE_ARN=${dev_CERTIFICATE_ARN}
                  export DOMAIN_NAME=${dev_DOMAIN_NAME}
                fi
              - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
              - >
                aws cloudformation deploy \
                  --template-file "aws/template.yml" \
                  --stack-name "${BITBUCKET_REPO_SLUG,,}" \
                  --capabilities CAPABILITY_IAM \
                  --no-fail-on-empty-changeset \
                  --parameter-overrides \
                    CertificateARN="${CERTIFICATE_ARN}" \
                    DomainName="${DOMAIN_NAME}" \
                  --tags \
                    AppId=${APP_ID} \
                    AppName=${BITBUCKET_REPO_SLUG} \
                    CostBearer=${COST_BEARER} \
                    CostCenter=${COST_CENTER} \
                    Environment=${ENVIRONMENT} \
                    Owner=${OWNER} \
                    Role=${ROLE} \
                    SLA=${SLA}
              - >
                S3_BUCKET=$(aws cloudformation describe-stacks \
                  --stack-name "${BITBUCKET_REPO_SLUG,,}" \
                  --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" \
                  --output text)
              - aws s3 sync ./storybook-static s3://${S3_BUCKET} --delete --no-progress
              - >
                DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
                  --stack-name "${BITBUCKET_REPO_SLUG,,}" \
                  --query "Stacks[0].Outputs[?OutputKey=='DistributionId'].OutputValue" \
                  --output text)
              - >
                aws cloudfront create-invalidation \
                  --distribution-id ${DISTRIBUTION_ID} \
                  --paths "/*"
