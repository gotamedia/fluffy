AWSTemplateFormatVersion: '2010-09-09'

Description: Fluffy UI static website stack - S3 / Route53 / CloudFront / CloudFormation

Parameters:
  DomainName:
    Description: Domain name of website
    Type: String
  CertificateARN:
    Description: Certificate ARN value for CloudFront usage
    Type: String

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Join ['', [!GetAtt 'S3Bucket.Arn', '/*']]
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub CloudFront OAI for ${AWS::StackName}

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        IPV6Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        Comment: !Join ['', ['Distribution created by stack ', !Ref 'AWS::StackName', ' in ', !Ref 'AWS::Region']]
        Origins:
          - DomainName: !GetAtt 'S3Bucket.RegionalDomainName'
            Id: !Ref 'AWS::StackName'
            S3OriginConfig:
              OriginAccessIdentity:
                !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: true
          MaxTTL: 31536000
          TargetOriginId: !Ref 'AWS::StackName'
          ViewerProtocolPolicy: 'redirect-to-https'
          LambdaFunctionAssociations:
          - EventType: viewer-request
            LambdaFunctionARN: !Ref RedirectLambdaVersion
        Aliases:
          - !Ref DomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateARN
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only

  RedirectLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt RedirectLambdaRole.Arn
      Runtime: nodejs14.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
            const { request } = event.Records[0].cf;
            const uri = request.uri;

            if (uri.endsWith('/')) {
                request.uri += 'index.html';
            }
            else if (!uri.includes('.')) {
                request.uri += '/index.html';
            }

            callback(null, request);
          };
  RedirectLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref RedirectLambda

  RedirectLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - edgelambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

Outputs:
  S3BucketName:
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketName'
  DistributionId:
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'
